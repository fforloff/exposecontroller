package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"net/http"
	"net/http/pprof"
	"os"
	"strings"
	"time"

	"github.com/olli-ai/exposecontroller/controller"
	"github.com/olli-ai/exposecontroller/exposestrategy"
	"k8s.io/klog"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/wait"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/cache"
	"k8s.io/client-go/tools/clientcmd"
)

const (
	healthPort = 10254
)

var (
	configFile = flag.String("config", "/etc/exposecontroller/config.yml",
		`Path to the file that contains the exposecontroller configuration to use`)

	KubeConfig = flag.String("kube-config", "", "path to Kubernetes config file")

	resyncPeriod = flag.Duration("sync-period", 30*time.Minute,
		`Relist and confirm services this often.`)

	timeout = flag.Duration("timeout", 5*time.Minute,
		`The timeout when not run as daemon.`)

	healthzPort = flag.Int("healthz-port", healthPort, "port for healthz endpoint.")

	profiling = flag.Bool("profiling", true, `Enable profiling via web interface host:port/debug/pprof/`)

	daemon  = flag.Bool("daemon", false, `Run as daemon mode watching changes as it happens.`)
	cleanup = flag.Bool("cleanup", false, `Removes Ingress rules that were generated by exposecontroller`)

	domain                = flag.String("domain", "", "Domain to use with your DNS provider (default: .nip.io).")
	filter                = flag.String("filter", "", "The filter of service names to look for when cleaning up")
	exposer               = flag.String("exposer", "", "Which strategy exposecontroller should use to access applications")
	httpb                 = flag.Bool("http", false, `Use HTTP`)
	watchNamespaces       = flag.String("watch-namespaces", "", "Exposecontroller will only look at the provided namespace")
	watchCurrentNamespace = flag.Bool("watch-current-namespace", true, `Exposecontroller will look at the current namespace only - (default: 'true' unless --watch-namespace specified)`)
	services              = flag.String("services", "", "List of comma separated service names which will be exposed, if empty all services from namespace will be considered")
)

func init() {
	klog.InitFlags(nil)
}

func main() {
	flag.Parse()

	var restClientConfig *rest.Config
	var err error
	if *KubeConfig == "" {
		klog.Infof("using in-cluster configuration")
		restClientConfig, err = rest.InClusterConfig()
	} else {
		klog.Infof("using configuration from '%s'", *KubeConfig)
		restClientConfig, err = clientcmd.BuildConfigFromFlags("", *KubeConfig)
	}
	if err != nil {
		klog.Fatalf("failed to create REST client config: %s", err)
	}

	kubeClient, err := kubernetes.NewForConfig(restClientConfig)
	for i := 0; i < 30; i++ {
		if err != nil {
			klog.Warningf("failed to create client, retrying: %s", err)
			time.Sleep(1 * time.Second)
			kubeClient, err = kubernetes.NewForConfig(restClientConfig)
		} else {
			break
		}
	}
	if err != nil {
		klog.Fatalf("failed to create client: %s", err)
	}
	currentNamespace := os.Getenv("KUBERNETES_NAMESPACE")
	if len(currentNamespace) == 0 {
		currentNamespace = metav1.NamespaceDefault
	}

	controllerConfig, exists, err := controller.LoadFile(*configFile)
	if !exists || err != nil {
		if err != nil {
			klog.Warningf("failed to load config file: %s", err)
		}

		cc2 := tryFindConfig(kubeClient, currentNamespace)
		if cc2 == nil {
			// lets try find the ConfigMap in the dev namespace
			resource, err := kubeClient.CoreV1().Namespaces().Get(currentNamespace, metav1.GetOptions{})
			if err == nil && resource != nil {
				labels := resource.Labels
				if labels != nil {
					ns := labels["team"]
					if ns == "" {
						klog.Warningf("No 'team' label on Namespace %s", currentNamespace)
					} else {
						klog.Infof("trying to find the ConfigMap in the Dev Namespace %s", ns)

						cc2 = tryFindConfig(kubeClient, ns)
					}
				} else {
					klog.Warningf("No labels on Namespace %s", currentNamespace)
				}
			} else {
				klog.Warningf("Failed to load Namespace %s: %s", currentNamespace, err)

				// lets try default to trimming the lasts path from the current namespace
				idx := strings.LastIndex(currentNamespace, "-")
				if idx > 1 {
					ns := currentNamespace[0:idx]
					cc2 = tryFindConfig(kubeClient, ns)
				}
			}
		}
		if cc2 != nil {
			controllerConfig = cc2
		}
	} else {
		klog.Infof("Loaded config file %s", *configFile)
	}
	klog.Infof("Config file before overrides\n%s", controllerConfig.String())

	if *domain != "" {
		controllerConfig.Domain = *domain
	}
	if *exposer != "" {
		controllerConfig.Exposer = *exposer
	}
	if *httpb {
		controllerConfig.HTTP = *httpb
	}

	if *watchCurrentNamespace {
		controllerConfig.WatchCurrentNamespace = *watchCurrentNamespace
	}
	if *watchNamespaces != "" {
		controllerConfig.WatchNamespaces = *watchNamespaces
		controllerConfig.WatchCurrentNamespace = false
	}

	if *services != "" {
		controllerConfig.Services = strings.Split(*services, ",")
	}

	klog.Infof("Config file after overrides\n%s", controllerConfig.String())

	//watchNamespaces := metav1.NamespaceAll
	watchNamespaces := controllerConfig.WatchNamespaces
	if controllerConfig.WatchCurrentNamespace {
		if currentNamespace == "" {
			klog.Fatalf("No current namespace found!")
		}
		watchNamespaces = currentNamespace
	}

	if *cleanup {
		err = exposestrategy.CleanIngressStrategy(kubeClient, watchNamespaces)
		if err != nil {
			klog.Fatalf("Could not clean: %v", err)
		}
		return
	}

	if *daemon {
		klog.Infof("Watching services in namespaces: `%s`", watchNamespaces)
		contr, err := controller.Daemon(kubeClient, watchNamespaces, controllerConfig, *resyncPeriod)
		if err == nil {
			go registerHandlers(contr)
			contr.Run(wait.NeverStop)
		}
	} else {
		klog.Infof("Running in : `%s`", watchNamespaces)
		err = controller.Run(kubeClient, watchNamespaces, controllerConfig, *timeout)
	}

	if err != nil {
		klog.Fatalf("%s", err)
	}
}

func tryFindConfig(kubeClient kubernetes.Interface, ns string) *controller.Config {
	var controllerConfig *controller.Config
	cm, err := kubeClient.CoreV1().ConfigMaps(ns).Get("exposecontroller", metav1.GetOptions{})
	if err == nil {
		klog.Infof("Using ConfigMap exposecontroller to load configuration...")
		// TODO we could allow the config to be passed in via key/value pairs?
		text := cm.Data["config.yml"]
		if text != "" {
			controllerConfig, err = controller.Load(text)
			if err != nil {
				klog.Warningf("Could not parse the config text from exposecontroller ConfigMap  %v", err)
			}
			klog.Infof("Loaded ConfigMap exposecontroller to load configuration!")
		}
	} else {
		klog.Warningf("Could not find ConfigMap exposecontroller ConfigMap in namespace %s: %s", ns, err)

		cm, err = kubeClient.CoreV1().ConfigMaps(ns).Get("ingress-config", metav1.GetOptions{})
		if err != nil {
			klog.Warningf("Could not find ConfigMap ingress-config ConfigMap in namespace %s: %s", ns, err)
		} else {
			klog.Infof("Loaded ConfigMap ingress-config to load configuration!")
			data := cm.Data
			if data != nil {
				controllerConfig, err = controller.MapToConfig(data)
				if err != nil {
					klog.Warningf("Failed to convert Map data %#v from configMap ingress-config in namespace %s due to: %s\n", controllerConfig, ns, err)
				}
			}
		}
	}
	return controllerConfig
}

func registerHandlers(controller cache.Controller) {
	mux := http.NewServeMux()
	mux.HandleFunc("/healthz", func(res http.ResponseWriter, req *http.Request) {
		ready := controller.HasSynced()

		if ready {
			res.WriteHeader(http.StatusOK)
			enc := json.NewEncoder(res)
			_ = enc.Encode(map[string]interface{}{
				"ready": ready,
			})
		} else {
			res.WriteHeader(http.StatusServiceUnavailable)
		}

	})

	if *profiling {
		mux.HandleFunc("/debug/pprof/", pprof.Index)
		mux.HandleFunc("/debug/pprof/profile", pprof.Profile)
		mux.HandleFunc("/debug/pprof/symbol", pprof.Symbol)
	}

	server := &http.Server{
		Addr:    fmt.Sprintf(":%v", *healthzPort),
		Handler: mux,
	}
	klog.Fatal(server.ListenAndServe())
}
